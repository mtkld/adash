#!/usr/bin/env bash

#!/usr/bin/env bash
set +H # disable ! history expansion
set -euo pipefail

###############################################################################
# quick dispatcher – run these tiny helpers and exit early
###############################################################################

#!/usr/bin/env bash
set +H # disable ! history expansion

case "$1" in
--get-todo-list)
	shift
	proj="$1"
	[[ -z "${proj:-}" || ! -f "$proj" ]] && exit 1
	SEP=$'\x1e' # delimiter for field separation
	while IFS=$'\t' read -r ts act msg cid; do
		[[ $act == comment && $msg == td\ \[* ]] || continue
		printf '%s%s%s%s%s\n' "$ts" "$SEP" "$msg" "$SEP" "$cid"
	done <"$proj"
	exit 0
	;;

--toggle-todo)
	shift
	proj="$1"
	cid="$2"
	[[ -z "${proj:-}" || -z "${cid:-}" || ! -f "$proj" ]] && exit 1
	tmp="$(mktemp)"
	while IFS=$'\t' read -r ts act msg id; do
		if [[ $act == comment && $id == "$cid" && $msg == td\ * ]]; then
			if [[ "$msg" == *"[x]"* ]]; then
				msg="${msg/\[x\]/[ ]}"
			else
				msg="${msg/\[ \]/[x]}"
			fi
		fi
		printf '%s\t%s\t%s\t%s\n' "$ts" "$act" "$msg" "$id"
	done <"$proj" >"$tmp"
	mv "$tmp" "$proj"
	exit 0
	;;
esac

###############################################################################
# quick dispatcher – run these tiny helpers and exit early
###############################################################################
case "$1" in
--get-todo-list)
	shift # $1 = project
	proj="$1"
	[[ -z $proj ]] && exit 1
	BASE="$(dirname "$0")"
	DATA="$BASE/data"
	# prints:  <ts><SEP><msg><SEP><cid>
	SEP=$'\x1e'
	while IFS=$'\t' read -r ts act msg cid; do
		[[ $act == comment && $msg == td\ \[* ]] || continue
		printf '%s%s%s%s%s\n' "$ts" "$SEP" "$msg" "$SEP" "$cid"
	done <"$DATA/$proj.log"
	exit 0
	;;
--toggle-todo)
	shift
	proj="$1"
	cid="$2"
	[[ -z $proj || -z $cid ]] && exit 1
	BASE="$(dirname "$0")"
	DATA="$BASE/data"
	tmp="$(mktemp)"
	while IFS=$'\t' read -r ts act msg id; do
		if [[ $act == comment && $id == "$cid" && $msg == td\ * ]]; then
			[[ $msg =~ \[x\] ]] &&
				msg="${msg/\[x\]/[ ]}" ||
				msg="${msg/\[ \]/[x]}"
		fi
		printf '%s\t%s\t%s\t%s\n' "$ts" "$act" "$msg" "$id"
	done <"$DATA/$proj.log" >"$tmp"
	mv "$tmp" "$DATA/$proj.log"
	exit 0
	;;
esac
####################################################
# (end of early dispatch block)
########################################################################
###############################################################################
#  statlog.sh – simple TUI project time-logger (Bash edition)
#  two-pane version – 2025-05-31
#
#  Features (parity with the C version)
#  ──────────────────────────────────────────────────────────────────────────
#  • LIST view & DATA view, switched with ↵ / p.
#  • Arrow or j/k navigation, highlighted row.
#  • a / f / c / s filters (all/finished/canceled/started).
#  • n – new project, A – archive, x – delete.
#  • i/o/f/x – check-in / out / finish / cancel inside DATA view.
#  • c – add comment, d – delete comment, l – list all comments.
#  • State kept in <base>/data  <base>/state  <base>/archived
###############################################################################
shopt -s extglob # for pattern-matching

# If the very first argument began with "--" we already handled it above.
# Throw it away so $1 now holds the real <base_dir> (if any).
[[ $1 == --* ]] && shift

# ────────────────────────────  Configuration  ────────────────────────────── #
MAX_PREVIEW=64
LOCK_FILE=checkedin
RUN_FILE=running

# Colours (tput numbers)
CLR_MAG=$(tput setaf 5) CLR_YEL=$(tput setaf 3)
CLR_CYA=$(tput setaf 6) CLR_RED=$(tput setaf 1)
CLR_GRN=$(tput setaf 2) CLR_WHT=$(tput setaf 7)
CLR_REV=$(tput rev) CLR_BLD=$(tput bold)
CLR_RST=$(tput sgr0)

# ─────────────────────────────  Globals  ─────────────────────────────────── #
if [[ -n $1 && $1 != --* ]]; then # normal run
	BASE="$1"
else                             # called via --toggle-todo / --list-todos-for-fzf
	BASE="${BASE:-$(dirname "$0")}" # already set in the stub-block, but keep a fallback
fi

DATA="$BASE/data"
STATE="$BASE/state"
ARCH="$BASE/archived"
mkdir -p "$DATA" "$STATE" "$ARCH"

active_id="" # current project
mode=list    # list | data | quit
comments=()  # loaded for DATA view
idx=0        # cursor in comments
filter=all   # list view filter
row=0        # highlighted list row

# ─────────────────────────────  Helpers  ─────────────────────────────────── #

print_help() {
	cat <<EOF
DATA view keybindings:
  i    Check in
  o    Check out
  f    Mark as finished
  x    Cancel
  X    Delete project (must be checked in)
  c    Add comment
  d    Delete current comment
  e    Edit project log in nvim
  l    List all comments
  L    List all "cc"-prefixed comments from all projects
  n    Create new project
  z    Re-open last checked-in project
  p    Return to project list view
  q    Quit
  ?    Show this help

LIST view:
  • Interactive selection using fzf
  • Navigate with ↑ ↓ or j k
  • Press ↵ (Enter) to open a project
EOF
}

toggle_todo_by_id() {
	local cid="$1" log="$DATA/$active_id.log" tmp
	tmp=$(mktemp)
	while IFS=$'\t' read -r ts act msg id; do
		if [[ $act == comment && $id == "$cid" && $msg == td\ * ]]; then
			if [[ $msg == td\ \[*\] ]]; then
				msg="${msg/\[ \]/[x]}"
			elif [[ $msg == td[xX]* ]]; then
				msg="${msg/\[x\]/[ ]}"
			fi
		fi
		printf '%s\t%s\t%s\t%s\n' "$ts" "$act" "$msg" "$id"
	done <"$log" >"$tmp"
	mv "$tmp" "$log"
}
list_todos() {
	clear
	printf "${CLR_BLD}TODOs – %s${CLR_RST}\n" "$active_id"
	printf "Press q to return\n\n"

	local found=0
	while IFS=$'\t' read -r ts act msg; do
		[[ $act == comment ]] || continue
		[[ $msg == td* ]] || continue

		local status="[ ]"
		if [[ $msg =~ ^td[[:space:]]*\[[xX]\] ]]; then
			status="[x]"
		fi

		printf "• %s  %s\n" "$status" "${msg#td}"
		found=1
	done <"$DATA/$active_id.log"

	((found == 0)) && echo "(no TODOs found)"

	while IFS= read -rsn1 k; do [[ $k == q ]] && break; done
}
toggle_todo_by_id() {
	local cid="$1"
	local log="$DATA/$active_id.log"
	local tmp="$(mktemp)"

	# Loop and replace the line matching this comment ID
	while IFS=$'\t' read -r ts act msg id; do
		if [[ "$act" == "comment" && "$id" == "$cid" ]]; then
			if [[ "$msg" =~ ^td[[:space:]]*\[[[:space:]]\] ]]; then
				msg="${msg/\[ \]/[x]}"
			elif [[ "$msg" =~ ^td[[:space:]]*\[[xX]\] ]]; then
				msg="${msg/\[x\]/[ ]}"
			fi
			printf "%s\tcomment\t%s\t%s\n" "$ts" "$msg" "$id" >>"$tmp"
		else
			printf "%s\t%s\t%s\t%s\n" "$ts" "$act" "$msg" "$id" >>"$tmp"
		fi
	done <"$log"

	mv "$tmp" "$log"
}

list_todos_fzf() {
	local -a lines
	mapfile -t lines < <(get_todo_list "$active_id")

	((${#lines[@]} == 0)) && {
		error_msg "No TODOs found."
		sleep 1
		return
	}

	local selected
	selected=$(
		printf '%s\n' "${lines[@]}" |
			fzf --ansi --delimiter="$SEP" \
				--with-nth=1,2 \
				--prompt='TODOs > ' \
				--header='td TODOs — press Ctrl-X to toggle done' \
				--bind "ctrl-x:execute-silent('$0' --toggle-todo \"$DATA/$active_id.log\" {3})+reload('$0' --get-todo-list \"$DATA/$active_id.log\")"
	) || return

	local cid="${selected##*$SEP}"
	printf '%s' "$cid" | xsel --clipboard
	printf "${CLR_GRN}Copied ID to clipboard: %s${CLR_RST}\n" "$cid"
	sleep 0.8
}

search_comment_ids() {
	local sep=$'\x1f'
	local lines=()

	while IFS= read -r -d '' file; do
		local project
		project=$(basename "$file" .log)
		while IFS=$'\t' read -r ts act msg cid; do
			[[ $act == comment && $cid =~ ^[a-f0-9]{4}$ ]] || continue
			date_only=${ts%%T*}
			lines+=("${cid}${sep}${project} | ${date_only} | ${msg}")
		done <"$file"
	done < <(find "$DATA" -name '*.log' -print0)

	((${#lines[@]} == 0)) && {
		error_msg "No ID-tagged comments found."
		sleep 1
		return
	}

	local selected
	selected=$(printf "%s\n" "${lines[@]}" | fzf --ansi --delimiter="$sep" --with-nth=2 --prompt="Search comments > " --height=95% --reverse) || return

	local cid="${selected%%"$sep"*}"
	printf "#%s" "$cid" | xsel --clipboard
	printf "${CLR_GRN}Copied ID to clipboard: ${cid}${CLR_RST}\n"
	sleep 0.8
}
short_id() {
	echo "$RANDOM$RANDOM" | sha1sum | cut -c1-4
}
get_locked_project() {
	[[ -f "$STATE/$LOCK_FILE" ]] && cat "$STATE/$LOCK_FILE" || echo ""
}
error_msg() {

	printf "\n${CLR_RED}Error:${CLR_RST} %s\n" "$1"
}
get_project_state() {
	local f="$DATA/$active_id.log"
	[[ -f $f ]] || {
		echo "none"
		return
	}
	tac "$f" | awk -F'\t' '$2 != "comment" { print $2; exit }'
}
show_project() {
	statbar
	local state
	state=$(get_project_state)
	local state_color
	case "$state" in
	checkin) state_color=$CLR_MAG ;;
	checkout) state_color=$CLR_YEL ;;
	created) state_color=$CLR_CYA ;;
	finish) state_color=$CLR_GRN ;;
	cancel) state_color=$CLR_RED ;;
	*) state_color=$CLR_WHT ;;
	esac

	printf '\n%sProject:%s %s  %s[%s]%s\n' \
		"${CLR_BLD}${CLR_GRN}" "${CLR_RST}" "$active_id" \
		"${CLR_BLD}${state_color}" "$state" "${CLR_RST}"

	local tot h m
	tot=$(total_minutes)
	h=$((tot / 60))
	m=$((tot % 60))
	printf 'Total time : %dh %02dm\n' "$h" "$m"

	if ((${#comments[@]})); then
		IFS='|' read -r ts msg <<<"${comments[-1]}"
		printf 'Latest comment (%s): %s\n' "$ts" "$msg"
	else
		printf 'No comments yet\n'
	fi
}

prompt_loop() {
	local cmd redraw=1
	while :; do
		((redraw)) && show_project

		printf $'\ncmd [i o f x | c d e l L s | n z p q ?] > '

		read -rsn1 cmd

		case "$cmd" in
		"") redraw=0 ;; # Enter only

		i)
			if write_log checkin; then
				redraw=1
			else
				redraw=0
			fi
			;;

		s)
			search_comment_ids
			redraw=1
			;;
		o)
			if write_log checkout; then
				redraw=1
			else
				redraw=0
			fi
			;;

		e)
			if [[ -n $active_id && -f "$DATA/$active_id.log" ]]; then
				nvim "$DATA/$active_id.log"
				redraw=1
			else
				error_msg "No active project or log file missing."
				sleep 0.5
				redraw=0
			fi
			;;
		f)
			if write_log finish; then
				redraw=1
			else
				redraw=0
			fi
			;;
		t)
			#list_todos
			list_todos_fzf
			redraw=1
			;;

		x)
			if write_log cancel; then
				redraw=1
			else
				redraw=0
			fi
			;;

		X)
			# Delete project, its id file
			read -r locked <"$STATE/$LOCK_FILE" 2>/dev/null
			if [[ "$locked" != "$active_id" ]]; then
				error_msg "Must be checked in to delete this project."
				sleep 0.5
				redraw=0
			else
				echo
				read -rp "Really delete project '$active_id'? [y/N] " confirm
				if [[ $confirm =~ ^[Yy]$ ]]; then
					rm -f "$DATA/$active_id.log"
					: >|"$STATE/$LOCK_FILE"
					: >|"$STATE/$RUN_FILE"
					rm -f "$STATE/index.cache"
					active_id=""
					comments=()
					idx=0
					printf "${CLR_RED}Project deleted.${CLR_RST}\n"
					sleep 0.5
					mode=list
					return
				else
					printf "Cancelled.\n"
					sleep 0.5
					redraw=1
				fi
			fi
			;;
		c)
			if edit_comment; then
				redraw=1
			else
				redraw=0
			fi
			;;

		\?)
			clear
			print_help
			printf "\nPress any key to continue..."
			read -rsn1
			redraw=1
			;;
		d)
			if delete_comment; then
				redraw=1
			else
				redraw=0
			fi
			;;

		l)
			list_all_comments
			redraw=1
			;;

		L)
			list_all_comments_all_files
			redraw=1
			;;
		n)
			echo
			read -rp "New project ID: " new_id
			if [[ -z $new_id || "$new_id" == *"/"* ]]; then
				error_msg "Invalid ID: cannot be empty or contain slashes."
			else
				if [[ -f "$DATA/$new_id.log" ]]; then
					error_msg "Project already exists."
				else
					echo "$(iso_now)"$'\tcreated\t' >>"$DATA/$new_id.log"
					active_id="$new_id"
					save_active "$new_id"
					load_comments
					printf "${CLR_GRN}Created and switched to '$new_id'${CLR_RST}\n"

					rm -f "$STATE/index.cache" # 👈 Ensure fresh rebuild
				fi
			fi
			redraw=1
			;;
		z)
			read -r locked <"$STATE/$LOCK_FILE" 2>/dev/null
			if [[ -z $locked ]]; then
				error_msg "No project is currently checked in."
				sleep 0.5
				redraw=0
			else
				active_id="$locked"
				save_active "$active_id"
				load_comments
				redraw=1
			fi
			;;
		p)
			mode=list
			return
			;;
		q)
			mode=quit
			return
			;;
		*)
			error_msg "Unknown command"
			sleep 0.25
			redraw=0
			;;
		esac

		load_comments
	done
}

rebuild_cache_if_needed() {
	local cache="$STATE/index.cache"
	local latest_log=$(find "$DATA" -type f -name '*.log' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2)
	local latest_cache=$(find "$cache" -type f -printf '%T@ %p\n' 2>/dev/null | cut -d' ' -f1)

	# Rebuild if cache is missing or older than newest log
	if [[ ! -f $cache || "$latest_log" && "$latest_log" -nt $cache ]]; then
		>"$cache"
		for f in "$DATA"/*.log; do
			[[ -e $f ]] || continue
			id=${f##*/}
			id=${id%.log}
			valid_id "$id" || continue
			ts="0000"
			state="created"
			preview=""
			while IFS=$'\t' read -r t a rest; do
				case $a in
				comment) [[ -z $preview ]] && preview="${rest:0:$MAX_PREVIEW}" ;;
				checkin | checkout | created | finish | cancel)
					ts=$t
					state=$a
					;;
				esac
			done <"$f"
			printf "%s|%s|%s|%s\n" "$id" "$ts" "$state" "$preview" >>"$cache"
		done
	fi
}
iso_now() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }
parse_iso() { date -d "$1" +%s 2>/dev/null; } # → epoch or empty

statbar() {
	local locked
	locked=$(get_locked_project)

	printf "\r${CLR_BLD}"
	if [[ -n $locked ]]; then
		printf "Checked-in to ${CLR_GRN}●${CLR_BLD} %s" "$locked"
	else
		printf "No project currently checked-in"
	fi
	printf "%*s${CLR_RST}\n" $((COLUMNS - ${#locked} - 27)) ""
}

#valid_id() { [[ $1 == +([!-./[:cntrl:]]) ]]; }
valid_id() {
	return 0 # Because we read file from filesystem, it is a valid project ID as filenames are project IDs
}

# ─────────────────────────────  State  ───────────────────────────────────── #
load_active() { read -r active_id <"$STATE/$RUN_FILE" 2>/dev/null || active_id=""; }
save_active() { printf "%s\n" "$1" >|"$STATE/$RUN_FILE"; }

load_comments() { # fills comments[]  (DATA view)
	comments=()
	idx=0
	[[ ! $active_id ]] && return
	local file="$DATA/$active_id.log"
	[[ -f $file ]] || return
	while IFS=$'\t' read -r ts act msg; do
		[[ $act == comment ]] && comments+=("$ts|$msg")
	done <"$file"
	((${#comments[@]})) && idx=$((${#comments[@]} - 1))
}

# ────────────────────────────  Logging  ──────────────────────────────────── #
write_log() { # $1 action  [$2 comment]
	[[ -z $active_id ]] && return 1
	local file="$DATA/$active_id.log"
	local ts
	ts=$(iso_now)
	local locked
	locked=$(get_locked_project)

	case $1 in
	checkin)
		if [[ "$locked" == "$active_id" ]]; then
			error_msg "Already checked in to this project."
			return 1
		elif [[ -n "$locked" ]]; then
			error_msg "Already checked in to '$locked'. Check out first."
			return 1
		fi

		printf "%s\tcheckin\t\n" "$ts" >>"$file"
		printf "%s\n" "$active_id" >|"$STATE/$LOCK_FILE"
		rm -f "$STATE/index.cache" # <-- Clear cache here
		;;

	checkout | finish | cancel)
		printf "%s\t%s\t\n" "$ts" "$1" >>"$file"
		: >|"$STATE/$LOCK_FILE"
		rm -f "$STATE/index.cache" # <-- Clear cache here
		;;

	comment)
		if [[ $locked != "$active_id" ]]; then
			error_msg "Check in first."
			sleep 0.25
			return 1
		fi
		printf "%s\tcomment\t%s\n" "$ts" "$2" >>"$file"
		;;

	created)
		printf "%s\tcreated\t\n" "$ts" >>"$file"
		rm -f "$STATE/index.cache" # <-- Clear cache here (optional)
		;;
	*)
		return 1
		;;
	esac

	return 0
}

total_minutes() { # summed checkins for project
	local f="$DATA/$active_id.log" cin=0 total=0
	[[ -f $f ]] || {
		echo 0
		return
	}
	while IFS=$'\t' read -r ts act _; do
		case $act in
		checkin) cin=$(parse_iso "$ts") ;;
		checkout)
			[[ $cin ]] && ((total += ($(parse_iso "$ts") - cin) / 60))
			cin=0
			;;
		esac
	done <"$f"
	echo $total
}

# ────────────────────────────  LIST view  ───────────────────────────────── #
collect_projects() {
	local cache="$STATE/index.cache"
	rebuild_cache_if_needed
	cat "$cache" | sort -t'|' -k2,2r
}

filter_match() { # $1 state
	case $filter in
	all) return 0 ;;
	finished) [[ $1 == finish ]] ;;
	canceled) [[ $1 == cancel ]] ;;
	started) [[ $1 == created ]] ;;
	esac
}

draw_list() {
	local -a list=()
	mapfile -t list < <(collect_projects)
	local visible=()
	for i in "${!list[@]}"; do
		IFS='|' read -r id ts st pv <<<"${list[i]}"
		filter_match "$st" && visible+=("$i") || true
	done
	((${#visible[@]} == 0)) && row=0 || ((row >= ${#visible[@]})) && row=$((${#visible[@]} - 1))

	clear
	statbar
	printf "${CLR_BLD}Project list – %s (%d shown)${CLR_RST}\n" "$filter" "${#visible[@]}"
	printf "[↑↓/jk] nav  ↵ open  n new  a/f/c/s filter  A archive  x delete  q quit\n\n"
	for k in "${!visible[@]}"; do
		IFS='|' read -r id ts st pv <<<"${list[${visible[k]}]}"
		sym="●" col=$CLR_WHT
		case $st in
		checkin) sym="●" col=$CLR_MAG ;;
		checkout) sym="●" col=$CLR_YEL ;;
		created) sym="●" col=$CLR_CYA ;;
		cancel) sym="✘" col=$CLR_RED ;;
		finish) sym="✔" col=$CLR_GRN ;;
		esac
		((k == row)) && printf "${CLR_REV}"
		printf "%b %-12s %s %-19s %-.*s%b\n" "$col" "$sym" "$id" "$ts" $((COLUMNS - 40)) "$pv" "${CLR_RST}"
	done
	((${#visible[@]})) || printf "(no projects match filter)\n"
	# Return indices array via global var VIS
	VIS=("${visible[@]}")
	LIST=("${list[@]}")
}

create_project() {
	[[ -s "$STATE/$LOCK_FILE" ]] && {
		error_msg "Check-out first"
		return
	}
	echo
	printf "New project id: "
	read -r id
	id="${id#"${id%%[![:space:]]*}"}" # strip leading
	id="${id%"${id##*[![:space:]]}"}" # strip trailing
	valid_id "$id" || {
		error_msg "Invalid id"
		return
	}
	active_id="$id"
	save_active "$id"
	write_log created
	load_comments
	mode=data
}

archive_or_delete() { # $1=archive|delete
	[[ ${#VIS[@]} -eq 0 ]] && return
	IFS='|' read -r id _ <<<"${LIST[${VIS[row]}]}"
	[[ $id == "$(<"$STATE/$LOCK_FILE" 2>/dev/null)" ]] && : >|"$STATE/$LOCK_FILE"
	[[ $id == "$(<"$STATE/$RUN_FILE" 2>/dev/null)" ]] && save_active ""
	case $1 in
	archive)
		mv "$DATA/$id.log" "$ARCH/$id.log"
		;;
	delete)
		rm -f "$DATA/$id.log"
		;;
	esac
}

# Because 	printf "x%-${width}.${width}s" "$str" wouldnt work
fit_width() {
	local str="$1"
	local width="$2"
	local out="${str:0:$width}"
	local len="${#out}"
	while [ "$len" -lt "$width" ]; do
		out="$out "
		len=$((len + 1))
	done
	printf '%s' "$out"
}
fit_width() {
	local str="$1"
	local width="$2"
	local out="${str:0:$width}"
	while [ "${#out}" -lt "$width" ]; do
		out+=" "
	done
	printf '%s' "$out"
}

SEP=$'\x1e'
# print a raw todo list for <project>  (no UI, just machine-parsable)
# output format:   <ts><SEP><msg><SEP><cid>
get_todo_list() {
	local proj="$1"
	local log="$DATA/$proj.log"
	[[ -f $log ]] || return # nothing to show

	# only lines that begin with  "td ["  (space after td!)
	while IFS=$'\t' read -r ts act msg cid; do
		[[ $act == comment && $msg == td\ \[* ]] || continue
		printf '%s%s%s%s%s\n' "$ts" "$SEP" "$msg" "$SEP" "$cid"
	done <"$log"
}
list_loop() {
	rebuild_cache_if_needed

	selected=$(
		while IFS='|' read -r id ts state preview; do
			id_fmt=$(fit_width "$id" 46)
			state_fmt=$(fit_width "$state" 10)
			ts_clean=${ts%%T*} # strip everything from T onwards
			ts_fmt=$(fit_width "$ts_clean" 20)

			preview_clean=${preview//$'\t'/ }
			preview_fmt=$(fit_width "$preview_clean" 40)

			# color state after padding
			# symbol and color mapping
			case $state in
			checkin)
				sym="+"
				col="$CLR_MAG"
				;;
			checkout)
				sym="-"
				col="$CLR_YEL"
				;;
			created)
				sym="•"
				col="$CLR_CYA"
				;;
			finish)
				sym="v"
				col="$CLR_GRN"
				;;
			cancel)
				sym="x"
				col="$CLR_RED"
				;;
			*)
				sym="?"
				col="$CLR_WHT"
				;;
			esac
			state_col="${col}${sym}${CLR_RST}"

			# Compose display with state first, then ID, then timestamp (and preview if needed)
			#visual="${state_col}  ${id_fmt}  ${ts_fmt}  ${preview_fmt}"
			visual="${state_col}  ${id_fmt}  ${ts_fmt}"

			# Print hidden ID (field 1) and visible line (field 2)
			printf '%s%s%s\n' "$id" "$SEP" "$visual"
		done <"$STATE/index.cache" |
			fzf --ansi --delimiter="$SEP" \
				--with-nth=2 \
				--nth=1 \
				--prompt='Project > ' \
				--no-sort --tiebreak=index \
				--preview-window=down:1 \
				--height=90% --reverse --exact --algo=v2
	) || return

	active_id=${selected%%"$SEP"*}
	[[ $active_id ]] || return

	save_active "$active_id"
	load_comments
	mode=data
}

# ────────────────────────────  DATA view  ───────────────────────────────── #

edit_comment() {
	local tmpfile comment ts
	tmpfile=$(mktemp --suffix=.comment)

	# Open editor
	nvim "$tmpfile"

	# Read comment while preserving UTF-8 and newlines
	comment=""
	while IFS= read -r line; do
		[[ $line =~ ^#.*$ || -z $line ]] && continue
		comment+="$line"$'\n'
	done <"$tmpfile"
	comment=${comment%$'\n'} # Remove trailing newline

	# Clean up editor file
	shred -u -n 5 "$tmpfile"

	# If empty after trimming
	[[ -z "$comment" ]] && return 1

	# Validate UTF-8
	if ! printf "%s" "$comment" | iconv -f UTF-8 -t UTF-8 >/dev/null 2>&1; then
		error_msg "Comment contains invalid UTF-8 characters!"
		sleep 1
		return 1
	fi

	# Write to log
	ts=$(iso_now)
	cid=$(short_id)
	printf "%s\tcomment\t%s\t%s\n" "$ts" "$comment" "$cid" >>"$DATA/$active_id.log"
	return 0
}

delete_comment() {
	((${#comments[@]})) || return 1

	IFS='|' read -r ts msg <<<"${comments[idx]}"
	local src="$DATA/$active_id.log"
	local tmp="$DATA/$active_id.tmp"

	if grep -vF "$ts"$'\tcomment\t'"$msg" "$src" >"$tmp"; then
		mv "$tmp" "$src"
		load_comments
		return 0
	else
		rm -f "$tmp"
		error_msg "Failed to delete comment."
		return 1
	fi
}
list_all_comments_all_files() {
	clear
	printf "${CLR_BLD}All cc-comments from all projects${CLR_RST}\n"
	printf "q to return\n\n"
	for f in "$DATA"/*.log; do
		[[ -f $f ]] || continue
		id=$(basename "$f" .log)
		while IFS=$'\t' read -r ts act msg; do
			[[ $act == comment ]] || continue
			[[ $msg == cc* ]] || continue
			printf "[%s] \033[36m%s\033[0m: %s\n" "$ts" "$id" "$msg"
		done <"$f"
	done
	while IFS= read -rsn1 k; do [[ $k == q ]] && break; done
}

list_all_comments() {
	clear
	printf "${CLR_BLD}All comments – %s${CLR_RST}\n" "$active_id"
	printf "q to return\n\n"
	for c in "${comments[@]}"; do
		IFS='|' read -r ts m <<<"$c"
		printf "• %s  —  %s\n" "$ts" "$m"
	done
	while IFS= read -rsn1 k; do [[ $k == q ]] && break; done
}

########################################################################
load_active
[[ $active_id ]] && mode=data

stty sane # ← restore cooked input mode

trap 'clear' EXIT
while [[ $mode != quit ]]; do
	case $mode in
	list) list_loop ;;
	data) prompt_loop ;;
	esac
done

clear
echo "bye."
